apply plugin: 'com.android.application'

def  appVersionName = "v6.0.0"

def getVersionNameByProperty() {
    def name
    if (hasProperty("VersionName") && getProperty('VersionName') != null) {
        name = getProperties().get('VersionName')
    } else {
        name = "2.0-default"
    }
    return name
}

def getVersionCodeByProperty() {
    def code
    if (hasProperty("VersionCode") && getProperties().get('VersionCode') != null) {
        code = getProperties().get('VersionCode')
    } else {
        code = 2
    }
    return code
}

android {
    compileSdkVersion compileApi

    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a'
            universalApk false
        }
    }

    defaultConfig {
        versionName getVersionNameByProperty()? getVersionNameByProperty():appVersionName
        targetSdkVersion targetApi
        minSdkVersion project.getProperties().get("SDK_VERSION")
        multiDexEnabled true
        proguardFiles 'proguard-sdk.pro', 'proguard-app.pro'

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.debug
        }
        debug {
            minifyEnabled false
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFile != null && outputFileName.endsWith('.apk')) {
                outputFileName = "FdeVncClient.apk"
            }
        }
        def buildType = variant.buildType.name
        if (buildType == "debug") {
            variant.outputs.all { output ->
                output.processManifest.doLast {
                    // Stores the path to the maifest.
                    String manifestPath = variant.outputs[0].getProcessResourcesProvider().get().manifestFile
                    def appLabel = android.defaultConfig.buildConfigFields.app_label
                    // Stores the contents of the manifest.
                    def manifestContent = file(manifestPath).getText()
                    println(appLabel)
                    // Changes the version code in the stored text.
                    manifestContent = manifestContent.replace('android:label="@string/bvnc_app_name"',
                            'android:label="DEBUG Fusion Linux Application"')
                    // Overwrites the manifest with the new text.
                    file(manifestPath).write(manifestContent)
                }
            }
        }
    }

//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

    task changeVersionName {
        doLast {
            def newVersionName = project.hasProperty('newVersionName') ? project.newVersionName : null
            if (newVersionName != null) {
                ext.dynamicVersionName = newVersionName
            	tasks.assembleRelease.configure {
                	dependsOn 'changeVersionName'
            	}
		println "Dynamic Version Name set to: $newVersionName"
            } else {
                println "Please provide a new version name using -PnewVersionName=<version_name>"
            }
        }
    }

    lintOptions {
        disable "Instantiatable"
    }
    namespace 'com.iiordanov.bVNC2'

}


dependencies {
    api 'com.android.support:multidex:1.0.3'
    implementation project(':bVNC')
    implementation project(':pubkeyGenerator')

}
